AWSTemplateFormatVersion: '2010-09-09'
Description: 'Template para automatizar reboot de instâncias EC2 específicas via Lambda e EventBridge'

Parameters:
  InstanceIds:
    Type: String
    Description: 'IDs das instâncias EC2 separados por vírgula (ex: i-1234567890abcdef0,i-0987654321abcdef0)'
    Default: ''
    
  CronExpression:
    Type: String
    Description: 'Expressão cron para agendamento (UTC) - Ex: cron(0 3 * * ? *) para 3AM UTC diariamente'
    Default: 'cron(0 3 * * ? *)'

Resources:
  # IAM Role para a Lambda Function
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: SWOInstanceRebootAutomationRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: EC2RebootPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ec2:RebootInstances
                  - ec2:DescribeInstances
                Resource: '*'
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*'

  # Lambda Function para reboot das instâncias
  RebootLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: SWOInstanceRebootAutomationFunction
      Runtime: python3.12
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 60
      MemorySize: 128
      Environment:
        Variables:
          INSTANCE_IDS: !Ref InstanceIds
      Code:
        ZipFile: |
          import boto3
          import os
          import json
          from datetime import datetime
          
          ec2 = boto3.client('ec2')
          
          def lambda_handler(event, context):
              instance_ids_str = os.environ.get('INSTANCE_IDS', '')
              
              if not instance_ids_str:
                  print("Nenhuma instância configurada para reboot")
                  return {
                      'statusCode': 200,
                      'body': json.dumps('Nenhuma instância configurada para reboot')
                  }
              
              instance_ids = [id.strip() for id in instance_ids_str.split(',') if id.strip()]
              
              print(f"Iniciando reboot das instâncias: {instance_ids}")
              print(f"Horário: {datetime.now().isoformat()}")
              
              successful_reboots = []
              failed_reboots = []
              
              for instance_id in instance_ids:
                  try:
                      response = ec2.describe_instances(InstanceIds=[instance_id])
                      
                      if not response['Reservations']:
                          print(f"Instância {instance_id} não encontrada")
                          failed_reboots.append({
                              'instance_id': instance_id,
                              'error': 'Instância não encontrada'
                          })
                          continue
                      
                      instance_state = response['Reservations'][0]['Instances'][0]['State']['Name']
                      
                      if instance_state != 'running':
                          print(f"Instância {instance_id} não está em estado 'running'. Estado atual: {instance_state}")
                          failed_reboots.append({
                              'instance_id': instance_id,
                              'error': f'Estado inadequado: {instance_state}'
                          })
                          continue
                      
                      ec2.reboot_instances(InstanceIds=[instance_id])
                      print(f"Reboot iniciado com sucesso para instância: {instance_id}")
                      successful_reboots.append(instance_id)
                      
                  except Exception as e:
                      print(f"Erro ao reiniciar instância {instance_id}: {str(e)}")
                      failed_reboots.append({
                          'instance_id': instance_id,
                          'error': str(e)
                      })
              
              result = {
                  'timestamp': datetime.now().isoformat(),
                  'total_instances': len(instance_ids),
                  'successful_reboots': successful_reboots,
                  'failed_reboots': failed_reboots,
                  'success_count': len(successful_reboots),
                  'failure_count': len(failed_reboots)
              }
              
              print(f"Resultado final: {json.dumps(result)}")
              
              return {
                  'statusCode': 200,
                  'body': json.dumps(result)
              }

  # Log Group para a Lambda
  LambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/lambda/SWOInstanceRebootAutomationFunction
      RetentionInDays: 30

  # EventBridge Rule para agendamento
  ScheduleRule:
    Type: AWS::Events::Rule
    Properties:
      Name: SWOInstanceRebootAutomationRule
      Description: !Sub 'Agendamento para reboot automático de EC2 - ${CronExpression}'
      ScheduleExpression: !Ref CronExpression
      State: ENABLED
      Targets:
        - Arn: !GetAtt RebootLambdaFunction.Arn
          Id: '1'

  # Permissão para EventBridge invocar a Lambda
  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref RebootLambdaFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt ScheduleRule.Arn

Outputs:
  LambdaFunctionArn:
    Description: 'ARN da função Lambda'
    Value: !GetAtt RebootLambdaFunction.Arn
    
  LambdaFunctionName:
    Description: 'Nome da função Lambda'
    Value: SWOInstanceRebootAutomationFunction
    
  ScheduleRuleArn:
    Description: 'ARN da regra do EventBridge'
    Value: !GetAtt ScheduleRule.Arn
    
  LambdaLogGroup:
    Description: 'CloudWatch Log Group da Lambda'
    Value: /aws/lambda/SWOInstanceRebootAutomationFunction
    
  ConfiguredInstances:
    Description: 'IDs das instâncias configuradas para reboot'
    Value: !Ref InstanceIds
    
  ConfiguredSchedule:
    Description: 'Agendamento configurado (UTC)'
    Value: !Ref CronExpression